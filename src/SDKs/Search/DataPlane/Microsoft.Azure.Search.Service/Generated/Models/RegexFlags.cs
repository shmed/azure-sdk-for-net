// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for RegexFlags.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RegexFlags
    {
        [EnumMember(Value = "CANON_EQ")]
        CANONEQ,
        [EnumMember(Value = "CASE_INSENSITIVE")]
        CASEINSENSITIVE,
        [EnumMember(Value = "COMMENTS")]
        COMMENTS,
        [EnumMember(Value = "DOTALL")]
        DOTALL,
        [EnumMember(Value = "LITERAL")]
        LITERAL,
        [EnumMember(Value = "MULTILINE")]
        MULTILINE,
        [EnumMember(Value = "UNICODE_CASE")]
        UNICODECASE,
        [EnumMember(Value = "UNIX_LINES")]
        UNIXLINES
    }
    internal static class RegexFlagsEnumExtension
    {
        internal static string ToSerializedValue(this RegexFlags? value)
        {
            return value == null ? null : ((RegexFlags)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this RegexFlags value)
        {
            switch( value )
            {
                case RegexFlags.CANONEQ:
                    return "CANON_EQ";
                case RegexFlags.CASEINSENSITIVE:
                    return "CASE_INSENSITIVE";
                case RegexFlags.COMMENTS:
                    return "COMMENTS";
                case RegexFlags.DOTALL:
                    return "DOTALL";
                case RegexFlags.LITERAL:
                    return "LITERAL";
                case RegexFlags.MULTILINE:
                    return "MULTILINE";
                case RegexFlags.UNICODECASE:
                    return "UNICODE_CASE";
                case RegexFlags.UNIXLINES:
                    return "UNIX_LINES";
            }
            return null;
        }

        internal static RegexFlags? ParseRegexFlags(this string value)
        {
            switch( value )
            {
                case "CANON_EQ":
                    return RegexFlags.CANONEQ;
                case "CASE_INSENSITIVE":
                    return RegexFlags.CASEINSENSITIVE;
                case "COMMENTS":
                    return RegexFlags.COMMENTS;
                case "DOTALL":
                    return RegexFlags.DOTALL;
                case "LITERAL":
                    return RegexFlags.LITERAL;
                case "MULTILINE":
                    return RegexFlags.MULTILINE;
                case "UNICODE_CASE":
                    return RegexFlags.UNICODECASE;
                case "UNIX_LINES":
                    return RegexFlags.UNIXLINES;
            }
            return null;
        }
    }
}
